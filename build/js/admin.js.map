{"version":3,"file":"admin.js","sources":["../../_assets_src/js/admin.ts"],"sourcesContent":["/**\n * JS for executing in the admin interface on the settings page to copy values to the clipboard,\n * generate a token, etc...\n */\n// cshp_pt is a localized global variable created when the file is enqueued from the plugin\ndeclare var cshp_pt: any;\nclass Admin {\n    constructor() {\n        // Set up event listeners when the document is ready.\n        document.addEventListener('readystatechange', () => {\n            if (document.readyState === 'interactive') {\n                this.createNewTokenListener();\n                this.copyTokenToClipboardListener();\n\n                if ((window as any).cshp_pt?.tab === 'log') {\n                    this.initializeDataTable('#cshpt-log');\n                }\n            }\n        });\n    }\n\n    /**\n     * Generate a unique UUID.\n     *\n     * @link https://stackoverflow.com/a/2117523/1069914\n     * @returns {string} A random UUID\n     */\n    private generateUUID(): string {\n        return ([1e7] as any).toString() + '-1e3-4e3-8e3-1e11'.replace(/[018]/g, (c) =>\n            ((+c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> +c / 4)))).toString(16)\n        )\n    }\n\n    /**\n     * Add event listeners to handle generating and deleting tokens.\n     */\n    private createNewTokenListener(): void {\n        const generateButton = document.querySelector<HTMLButtonElement>('#cshp-generate-key');\n        const currentTokenInput = document.querySelector<HTMLInputElement>('#cshp-token');\n        const deleteButton = document.querySelector<HTMLButtonElement>('#cshp-delete-key');\n\n        if (generateButton && currentTokenInput) {\n            generateButton.addEventListener('click', () => {\n                if (currentTokenInput.value.trim() === '') {\n                    currentTokenInput.value = this.generateUUID();\n                } else if (confirm('Generate a new token? WARNING: Old token will be deleted')) {\n                    currentTokenInput.value = this.generateUUID();\n                }\n            });\n        }\n\n        if (deleteButton) {\n            deleteButton.addEventListener('click', () => {\n                if (confirm(\n                    'Delete token? WARNING: You will not be able to download the plugins if the token is deleted and a new one is not generated'\n                )) {\n                    if (currentTokenInput) {\n                        currentTokenInput.value = '';\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Copies a given text to the clipboard using the Clipboard API.\n     *\n     * @param text The value to copy to the clipboard.\n     * @returns {Promise<void>} A promise for the clipboard operation.\n     */\n    private copyToClipboard(text: string): Promise<void> {\n        if (navigator && navigator.clipboard && navigator.clipboard.writeText) {\n            return navigator.clipboard.writeText(text);\n        }\n\n        return Promise.reject(new Error('The Clipboard API is not available.'));\n    }\n\n    /**\n     * Add event listeners to copy buttons for copying to the clipboard.\n     */\n    private copyTokenToClipboardListener(): void {\n        const copyButtons = document.querySelectorAll<HTMLButtonElement>('.copy-button');\n\n        copyButtons.forEach((copyButton) => {\n            copyButton.addEventListener('click', (event) => {\n                const button = event.target as HTMLButtonElement;\n                const dataCopy = button.dataset.copy;\n\n                if (dataCopy) {\n                    const selector = `#${dataCopy}, input[name=\"${dataCopy}\"], select[name=\"${dataCopy}\"], textarea[name=\"${dataCopy}\"], .${dataCopy}`;\n                    const element = document.querySelector<HTMLInputElement | HTMLElement>(selector);\n\n                    if (element) {\n                        const text = element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement\n                            ? element.value\n                            : element.textContent?.trim() || '';\n\n                        if (text) {\n                            this.copyToClipboard(text).catch((error) => console.error(error));\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * Initializes a data table for a given table selector.\n     *\n     * @param selector The CSS selector for the table element.\n     */\n    private initializeDataTable(selector: string): void {\n        // @ts-ignore: simpleDataTables is used directly in the browser from a third-party library\n        new simpleDatatables.DataTable(selector, {\n            searchable: true,\n            fixedHeight: true,\n        });\n    }\n}\nnew Admin();"],"names":["Admin","generateUUID","toString","replace","c","crypto","getRandomValues","Uint8Array","createNewTokenListener","generateButton","document","querySelector","currentTokenInput","deleteButton","addEventListener","value","trim","confirm","copyToClipboard","text","navigator","clipboard","writeText","Promise","reject","Error","copyTokenToClipboardListener","copyButtons","querySelectorAll","forEach","copyButton","event","button","target","dataCopy","dataset","copy","selector","element","HTMLInputElement","HTMLTextAreaElement","_a","textContent","catch","error","console","initializeDataTable","simpleDatatables","DataTable","searchable","fixedHeight","constructor","readyState","window","cshp_pt","tab"],"mappings":"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"}