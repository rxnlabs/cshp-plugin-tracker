{"version":3,"file":"admin.min.js","sources":["../../_assets_src/js/admin.ts"],"sourcesContent":["/**\n * JS for executing in the admin interface on the settings page to copy values to the clipboard,\n * generate a token, etc...\n */\n// cshp_pt is a localized global variable created when the file is enqueued from the plugin\ndeclare var cshp_pt: any;\nclass Admin {\n    constructor() {\n        // Set up event listeners when the document is ready.\n        document.addEventListener('readystatechange', () => {\n            if (document.readyState === 'interactive') {\n                this.createNewTokenListener();\n                this.copyTokenToClipboardListener();\n\n                if ((window as any).cshp_pt?.tab === 'log') {\n                    this.initializeDataTable('#cshpt-log');\n                }\n            }\n        });\n    }\n\n    /**\n     * Generate a unique UUID.\n     *\n     * @link https://stackoverflow.com/a/2117523/1069914\n     * @returns {string} A random UUID\n     */\n    private generateUUID(): string {\n        return ([1e7] as any).toString() + '-1e3-4e3-8e3-1e11'.replace(/[018]/g, (c) =>\n            ((+c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> +c / 4)))).toString(16)\n        )\n    }\n\n    /**\n     * Add event listeners to handle generating and deleting tokens.\n     */\n    private createNewTokenListener(): void {\n        const generateButton = document.querySelector<HTMLButtonElement>('#cshp-generate-key');\n        const currentTokenInput = document.querySelector<HTMLInputElement>('#cshp-token');\n        const deleteButton = document.querySelector<HTMLButtonElement>('#cshp-delete-key');\n\n        if (generateButton && currentTokenInput) {\n            generateButton.addEventListener('click', () => {\n                if (currentTokenInput.value.trim() === '') {\n                    currentTokenInput.value = this.generateUUID();\n                } else if (confirm('Generate a new token? WARNING: Old token will be deleted')) {\n                    currentTokenInput.value = this.generateUUID();\n                }\n            });\n        }\n\n        if (deleteButton) {\n            deleteButton.addEventListener('click', () => {\n                if (confirm(\n                    'Delete token? WARNING: You will not be able to download the plugins if the token is deleted and a new one is not generated'\n                )) {\n                    if (currentTokenInput) {\n                        currentTokenInput.value = '';\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Copies a given text to the clipboard using the Clipboard API.\n     *\n     * @param text The value to copy to the clipboard.\n     * @returns {Promise<void>} A promise for the clipboard operation.\n     */\n    private copyToClipboard(text: string): Promise<void> {\n        if (navigator && navigator.clipboard && navigator.clipboard.writeText) {\n            return navigator.clipboard.writeText(text);\n        }\n\n        return Promise.reject(new Error('The Clipboard API is not available.'));\n    }\n\n    /**\n     * Add event listeners to copy buttons for copying to the clipboard.\n     */\n    private copyTokenToClipboardListener(): void {\n        const copyButtons = document.querySelectorAll<HTMLButtonElement>('.copy-button');\n\n        copyButtons.forEach((copyButton) => {\n            copyButton.addEventListener('click', (event) => {\n                const button = event.target as HTMLButtonElement;\n                const dataCopy = button.dataset.copy;\n\n                if (dataCopy) {\n                    const selector = `#${dataCopy}, input[name=\"${dataCopy}\"], select[name=\"${dataCopy}\"], textarea[name=\"${dataCopy}\"], .${dataCopy}`;\n                    const element = document.querySelector<HTMLInputElement | HTMLElement>(selector);\n\n                    if (element) {\n                        const text = element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement\n                            ? element.value\n                            : element.textContent?.trim() || '';\n\n                        if (text) {\n                            this.copyToClipboard(text).catch((error) => console.error(error));\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * Initializes a data table for a given table selector.\n     *\n     * @param selector The CSS selector for the table element.\n     */\n    private initializeDataTable(selector: string): void {\n        // @ts-ignore: simpleDataTables is used directly in the browser from a third-party library\n        new simpleDatatables.DataTable(selector, {\n            searchable: true,\n            fixedHeight: true,\n        });\n    }\n}\nnew Admin();"],"names":["generateUUID","toString","replace","c","crypto","getRandomValues","Uint8Array","createNewTokenListener","generateButton","document","querySelector","currentTokenInput","deleteButton","addEventListener","value","trim","confirm","this","copyToClipboard","text","navigator","clipboard","writeText","Promise","reject","Error","copyTokenToClipboardListener","querySelectorAll","forEach","copyButton","event","dataCopy","target","dataset","copy","selector","element","HTMLInputElement","HTMLTextAreaElement","_a","textContent","catch","error","console","initializeDataTable","simpleDatatables","DataTable","searchable","fixedHeight","constructor","readyState","window","cshp_pt","tab"],"mappings":"yBAwHA,IAlHA,MAqBYA,YAAAA,GACJ,MAAQ,CAAC,KAAaC,WAAa,oBAAoBC,QAAQ,UAAWC,KACnEA,EAAKC,OAAOC,gBAAgB,IAAIC,WAAW,IAAI,GAAM,KAAOH,EAAI,GAAMF,SAAS,KAE1F,CAKQM,sBAAAA,GACJ,MAAMC,EAAiBC,SAASC,cAAiC,sBAC3DC,EAAoBF,SAASC,cAAgC,eAC7DE,EAAeH,SAASC,cAAiC,oBAE3DF,GAAkBG,GAClBH,EAAeK,iBAAiB,SAAS,MACE,KAAnCF,EAAkBG,MAAMC,QAEjBC,QAAQ,+DADfL,EAAkBG,MAAQG,KAAKjB,eAGnC,IAIJY,GACAA,EAAaC,iBAAiB,SAAS,KAC/BG,QACA,+HAEIL,IACAA,EAAkBG,MAAQ,GAElC,GAGZ,CAQQI,eAAAA,CAAgBC,GACpB,OAAIC,WAAaA,UAAUC,WAAaD,UAAUC,UAAUC,UACjDF,UAAUC,UAAUC,UAAUH,GAGlCI,QAAQC,OAAO,IAAIC,MAAM,uCACpC,CAKQC,4BAAAA,GACgBjB,SAASkB,iBAAoC,gBAErDC,SAASC,IACjBA,EAAWhB,iBAAiB,SAAUiB,UAClC,MACMC,EADSD,EAAME,OACGC,QAAQC,KAEhC,GAAIH,EAAU,CACV,MAAMI,EAAW,IAAIJ,kBAAyBA,qBAA4BA,uBAA8BA,SAAgBA,IAClHK,EAAU3B,SAASC,cAA8CyB,GAEvE,GAAIC,EAAS,CACT,MAAMjB,EAAOiB,aAAmBC,kBAAoBD,aAAmBE,oBACjEF,EAAQtB,OACW,QAAnByB,EAAAH,EAAQI,mBAAW,IAAAD,OAAA,EAAAA,EAAExB,SAAU,GAEjCI,GACAF,KAAKC,gBAAgBC,GAAMsB,OAAOC,GAAUC,QAAQD,MAAMA,IAElE,CACJ,IACJ,GAER,CAOQE,mBAAAA,CAAoBT,GAExB,IAAIU,iBAAiBC,UAAUX,EAAU,CACrCY,YAAY,EACZC,aAAa,GAErB,CA/GAC,WAAAA,GAEIxC,SAASI,iBAAiB,oBAAoB,WACd,gBAAxBJ,SAASyC,aACTjC,KAAKV,yBACLU,KAAKS,+BAEgC,iBAAhCa,EAAAY,OAAeC,8BAASC,MACzBpC,KAAK2B,oBAAoB,cAEjC,GAER"}